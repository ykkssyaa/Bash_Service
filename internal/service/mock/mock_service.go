// Code generated by MockGen. DO NOT EDIT.
// Source: internal/service/service.go

// Package mock_service is a generated GoMock package.
package mock_service

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	models "github.com/ykkssyaa/Bash_Service/internal/models"
)

// MockCommand is a mock of Command interface.
type MockCommand struct {
	ctrl     *gomock.Controller
	recorder *MockCommandMockRecorder
}

// MockCommandMockRecorder is the mock recorder for MockCommand.
type MockCommandMockRecorder struct {
	mock *MockCommand
}

// NewMockCommand creates a new mock instance.
func NewMockCommand(ctrl *gomock.Controller) *MockCommand {
	mock := &MockCommand{ctrl: ctrl}
	mock.recorder = &MockCommandMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCommand) EXPECT() *MockCommandMockRecorder {
	return m.recorder
}

// CreateCommand mocks base method.
func (m *MockCommand) CreateCommand(script string) (models.Command, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCommand", script)
	ret0, _ := ret[0].(models.Command)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateCommand indicates an expected call of CreateCommand.
func (mr *MockCommandMockRecorder) CreateCommand(script interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCommand", reflect.TypeOf((*MockCommand)(nil).CreateCommand), script)
}

// GetAllCommands mocks base method.
func (m *MockCommand) GetAllCommands(limit, offset int) ([]models.Command, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllCommands", limit, offset)
	ret0, _ := ret[0].([]models.Command)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllCommands indicates an expected call of GetAllCommands.
func (mr *MockCommandMockRecorder) GetAllCommands(limit, offset interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllCommands", reflect.TypeOf((*MockCommand)(nil).GetAllCommands), limit, offset)
}

// GetCommand mocks base method.
func (m *MockCommand) GetCommand(id int) (models.Command, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCommand", id)
	ret0, _ := ret[0].(models.Command)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCommand indicates an expected call of GetCommand.
func (mr *MockCommandMockRecorder) GetCommand(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCommand", reflect.TypeOf((*MockCommand)(nil).GetCommand), id)
}

// StopCommand mocks base method.
func (m *MockCommand) StopCommand(id int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StopCommand", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// StopCommand indicates an expected call of StopCommand.
func (mr *MockCommandMockRecorder) StopCommand(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StopCommand", reflect.TypeOf((*MockCommand)(nil).StopCommand), id)
}
